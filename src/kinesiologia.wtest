import kinesiologia.*

describe "group of tests" {


	var magneto = new Magneto() 
	var bicicleta = new Bicicleta()
	var minitramp = new Minitramp()
	
	//un paciente común de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
	var leo = new Paciente(edad = 40 , nivelDeDolor = 10 , nivelDeFortaleza = 20, rutina= [ bicicleta, minitramp, bicicleta , magneto]) //TODO 

	//una paciente comun de 3 años, dolor 30, fortaleza,  50 rutina = magneto, bicicleta 
	var milena = new Paciente (edad = 3 , nivelDeDolor = 30 , nivelDeFortaleza = 50 , rutina= [magneto , bicicleta])//TODO

//**************************objetos para puntos 3*********************************/
//
////3.1
//	//un paciente Resistente de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//(misma configuracion para leo, pero siendo resistente)
	var nico = new PacienteResistente(edad = 40 , nivelDeDolor = 10 , nivelDeFortaleza = 20, rutina= [ bicicleta, minitramp, bicicleta , magneto])//TODO
//
////3.2	
//	//un paciente Caprichosa de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//todos los aparatos son blancos 
//	//(mismo que leo)	
	var victoria =new PacienteCaprichoso(edad = 40 , nivelDeDolor = 10 , nivelDeFortaleza = 20, rutina= [ bicicleta, minitramp, bicicleta , magneto])  //TODO
//	
	var bicicletaRoja = new Bicicleta (color = "rojo") //TODO apuntar a una bicicleta roja, ojo que la otra bicicleta blanca sigue existiendo!
//	//un paciente Caprichosa de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicletaRoja , magento.
//	//todos los aparatos son blancos menos la segunda bicicleta que es roja
//	//(mismo que leo)	
	var andrea = new PacienteCaprichoso(edad = 40 , nivelDeDolor = 10 , nivelDeFortaleza = 20, rutina= [ bicicleta, minitramp, bicicletaRoja , magneto])//TODO  
//	
////3.3	
//	//un paciente De Rapida Recuperacion 
//	//un paciente Resistente de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//(misma configuracion para leo)
	var zoe  = new PacienteRapidaRecuperacion(edad = 40 , nivelDeDolor = 10 , nivelDeFortaleza = 20, rutina= [ bicicleta, minitramp, bicicleta , magneto])//TODO 
//
//**************************objetos para puntos 4*********************************/
//	//un centro que tiene como aparatos al magneto, la bicicleta, la bicicleta roja y el minitramp
//	//y como pacientes a leo, milena, nico, victoria, andrea y zoe 
	var centro = new CentroKinesiologia(aparatos=[magneto , bicicleta , bicicletaRoja, minitramp],pacientes=#{leo , milena , nico , victoria, andrea , zoe})//TODO

	
//***********************Punto 1*************************************
	test "usar magneto leo" {
		assert.that(magneto.puedeSerUsadoPor(leo))	
		leo.usarAparato(magneto)
		/*TODO: leo usa el magento */
		assert.equals(9, leo.nivelDeDolor())		
	} 	

	test "usar magneto milena" {
		assert.that(magneto.puedeSerUsadoPor(milena))
		milena.usarAparato(magneto)	
		/*TODO: milena usa el magento */
		assert.equals(27, milena.nivelDeDolor())		
	}
	
	test "usar bicicleta leo" {
		assert.that(bicicleta.puedeSerUsadoPor(leo))
		leo.usarAparato(bicicleta)	
		/*TODO: leo usa la bicicleta */
		assert.equals(6, leo.nivelDeDolor())		
		assert.equals(23, leo.nivelDeFortaleza())		
	} 	
//
	test "usar bicicleta milena" {
		assert.notThat(bicicleta.puedeSerUsadoPor(milena))	
//		/*TODO: milena usa la bicicleta (cosa que no puede hacer!) */
	}
//	
	test "usar minitramp leo" {
		assert.that(minitramp.puedeSerUsadoPor(leo))
		leo.usarAparato(minitramp)	
//		/*TODO: leo usa el minitramp */
		assert.equals(24, leo.nivelDeFortaleza())		
} 	
//
	test "usar minitramp milena" {
		assert.notThat(minitramp.puedeSerUsadoPor(milena))	
//		/*TODO: milena usa el minitramp (cosa que no puede hacer!) */
//		
	}
//***********************Punto 2*************************************
	test "sesion leo" {
		assert.that(leo.puedeHacerSesion())	
		leo.realizarSesion(valorPacienteRapido.valorDeRecuperacion())
//		/*TODO: leo hace la sesion */
		assert.equals(1.8, leo.nivelDeDolor()) //10 -4 -4 - 0.2 =  1.8		
		assert.equals(30, leo.nivelDeFortaleza()) //20	+ 3 + 4 + 3	
	}	
//	
	test "sesion milena" {
		assert.notThat(milena.puedeHacerSesion())	
//		/* milena hace la sesion (cosa que no puede hacer) */
	}	
//
//***********************Punto 3*************************************//
	test "sesion nico (resistente)" {
		assert.that(nico.puedeHacerSesion())	
		nico.realizarSesion(valorPacienteRapido.valorDeRecuperacion())
//		/*TODO: nico hace la sesion */
		assert.equals(1.8, nico.nivelDeDolor()) //10 -4 -4 - 0.2 =  1.8		
		assert.equals(34, nico.nivelDeFortaleza()) //20	+ 3 + 4 + 3	+ 4
	}
//	
	test "sesion victoria (caprichosa sin aparato rojo)" {
		assert.notThat(victoria.puedeHacerSesion())	
//		/* victoria hace la sesion (cosa que no puede hacer) */
	}		

	test "sesion andrea (caprichosa con aparato rojo)" {
		assert.that(andrea.puedeHacerSesion())
		andrea.realizarSesion(valorPacienteRapido.valorDeRecuperacion())	
//		/* andrea hace la sesion */
		assert.equals(-5.58, andrea.nivelDeDolor()) 	//10 -4 -4 - 0.2 -4 -4  -(-0.62)
		assert.equals(40, andrea.nivelDeFortaleza()) //20	+ 3 + 4 + 3	+ 3 + 4 + 3	  
	}		
//	
	test "sesion zoe (resistente)" {

//		//TODO:  Configurar para que se use el valor 1 para todos los resistentes
		valorPacienteRapido.valorDeRecuperacion(1)
		assert.that(zoe.puedeHacerSesion())	
		zoe.realizarSesion(valorPacienteRapido.valorDeRecuperacion())
//		/* zoe hace la sesion */

		assert.equals(0.8, zoe.nivelDeDolor()) //10 -4 -4 - 0.2 -1  =  0.8		
		assert.equals(30, zoe.nivelDeFortaleza()) //20	+ 3 + 4 + 3	
	}
//***********************Punto 4*************************************
	test "colores" {
		assert.equals(#{"rojo","blanco"}, centro.colores())		
	}
//
	test "pacientes chiquitos" {
		assert.equals(#{milena}, centro.menoresDe8anios())	
	}	
//
	test "cuantos no pueden cumplir la sesion" {
		assert.equals(2, centro.noCumplenSesion()) //no pueden milena y victoria = 2	
	}	
	
}